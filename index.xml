<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tdl-jturner</title>
    <link>http://thedigitallink.net/</link>
    <description>Recent content on tdl-jturner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Oct 2019 07:36:56 -0700</lastBuildDate>
    
	<atom:link href="http://thedigitallink.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Alexa : Build me a skill</title>
      <link>http://thedigitallink.net/posts/alexaskill/</link>
      <pubDate>Thu, 03 Oct 2019 07:36:56 -0700</pubDate>
      
      <guid>http://thedigitallink.net/posts/alexaskill/</guid>
      <description>The other day I was asked to look in to how we could build an Alexa skill that interacted with an onsite service. This was a lot more fun than expected and I wanted to share it as a blog post.
Creating A Skill First things first, head over to the Alexa developer page and sign up for an account.
Once in the console, we will create a new skill.</description>
    </item>
    
    <item>
      <title>Flutter - Writing The Code</title>
      <link>http://thedigitallink.net/posts/flutter-writing-the-code/</link>
      <pubDate>Wed, 11 Sep 2019 10:03:58 -0700</pubDate>
      
      <guid>http://thedigitallink.net/posts/flutter-writing-the-code/</guid>
      <description>This is a continuation of the initial Flutter Design. In this post, I&amp;rsquo;ll talk about writing the actual code and how it developed from an idea to a running project. When I started laying out Flutter, I wanted to make it so that each microservice was simple and self contained yet also consistent designed for modularity. I also wanted to start with a framework that I knew well and was very accessible for me.</description>
    </item>
    
    <item>
      <title>Self-Signed SSL</title>
      <link>http://thedigitallink.net/posts/self-signing/</link>
      <pubDate>Fri, 30 Aug 2019 07:49:44 -0700</pubDate>
      
      <guid>http://thedigitallink.net/posts/self-signing/</guid>
      <description>I&amp;rsquo;ve been working with two-way SSL in Kafka recently and could not find a concise place with the steps of creating your own CA and issuing certificates for the nodes. The same process would apply to SSL for many distributed systems including Cassandra and others. Here&amp;rsquo;s a post with a little background and some scripts to assist.
What is SSL? SSL is great as a minimal level of security in any web-based product and something you should always use when available.</description>
    </item>
    
    <item>
      <title>Designing Flutter</title>
      <link>http://thedigitallink.net/posts/flutter-design/</link>
      <pubDate>Mon, 26 Aug 2019 14:19:54 -0700</pubDate>
      
      <guid>http://thedigitallink.net/posts/flutter-design/</guid>
      <description>I&amp;rsquo;ve been thinking of a method to experiment with new technologies in a practical way beyond just Hello World. The goal would be to make a system that is complex enough to be valid but still simple enough to rapidly deploy in new languages and technologies. In addition, it would be broken in to microservices such that any individual method could be quickly swapped out and play well together. This way if I wanted to explore a new language or technology then I could simply rewrite a single API and see what happens.</description>
    </item>
    
    <item>
      <title>Hugo and GitHub Website</title>
      <link>http://thedigitallink.net/posts/github-hugo-website/</link>
      <pubDate>Sun, 25 Aug 2019 16:44:58 -0700</pubDate>
      
      <guid>http://thedigitallink.net/posts/github-hugo-website/</guid>
      <description>GitHub offers GitHub Pages for repositories, users, and organizations. I used this recently in conjunction with Casquatch to host a new Hugo based manual. Today, I decided to use the same technology to setup a personal profile page and what better way to start off the blog than discussing the creation of that blog.
Prerequisites The following technologies will be used
 Git - Client for source code repo GitHub - Source Code Repository Hugo - Static Website Framework Coder Theme - Theme for Hugo but this could easily be anything  Before starting, please make sure Git and Hugo are installed and functioning.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://thedigitallink.net/about/</link>
      <pubDate>Sun, 25 Aug 2019 14:40:54 -0700</pubDate>
      
      <guid>http://thedigitallink.net/about/</guid>
      <description>Hello! My name is Josh Turner. I&amp;rsquo;ve been in the technology field for a little over a decade now. I&amp;rsquo;ve worked across the spectrum from code monkey just developing what the Business Analyst asked for to leading teams. I&amp;rsquo;ve lead strategy, defined goals, and worked with leadership to move the business forward. I&amp;rsquo;ve built databases, applications, infrastructure, distributed systems, and contributed to open source projects. I&amp;rsquo;ve been in operations and fought outages at 3 AM to then explain to leadership what happened at 9 AM.</description>
    </item>
    
    <item>
      <title>Announcing Casquatch 2.0</title>
      <link>http://thedigitallink.net/posts/casquatch20/</link>
      <pubDate>Wed, 21 Aug 2019 15:54:38 -0700</pubDate>
      
      <guid>http://thedigitallink.net/posts/casquatch20/</guid>
      <description>I&amp;rsquo;m very excited to announce the 2.0 release of Casquatch! With it comes a full rewrite to align with the 4.x DataStax OSS Driver, new manual (https://tmobile.github.io/casquatch), annotations, spring integration, failover policy, and even more streamlined code.
Get yourself a cup of coffee and run through the tutorial (https://tmobile.github.io/casquatch/examples/springrest/). You&amp;rsquo;ll be up and running with a full Spring Rest DAO in just a few minutes.</description>
    </item>
    
    <item>
      <title>Seattle Cassandra Users: An OSS Java Abstraction Layer for Cassandra</title>
      <link>http://thedigitallink.net/events/2019-06-26-cassandraseattleusers-casquatch/</link>
      <pubDate>Wed, 26 Jun 2019 15:38:02 -0700</pubDate>
      
      <guid>http://thedigitallink.net/events/2019-06-26-cassandraseattleusers-casquatch/</guid>
      <description>Date : June 26, 2019 Location: Seattle, WA Event: Seattle Cassandra Users  Abstract Project Casquatch is a database abstraction layer with code generation designed to streamline Cassandra development. Out of the box it comes pre-tuned with high available policies including load balancing, geo-redundancy, connection pooling, etc., sitting on top of the DataStax driver using native APIs. All of this is abstracted behind the ever prevalent POJO. Instead of writing CQL, we utilize generic programming that allows you to simply pass a generated POJO to a save() method or populate with a getById().</description>
    </item>
    
    <item>
      <title>DataStax Accelerate: Casquatch</title>
      <link>http://thedigitallink.net/events/2019-05-22-datastaxaccelerate/</link>
      <pubDate>Wed, 22 May 2019 15:38:02 -0700</pubDate>
      
      <guid>http://thedigitallink.net/events/2019-05-22-datastaxaccelerate/</guid>
      <description>Date : May 22, 2019 Location: Washington, DC Event: DataStax Accelerate 2019 Video: YouTube Slides: SlideShare  Abstract Project Casquatch is a database abstraction layer with code generation designed to streamline Cassandra development. Out of the box it comes pre-tuned with high available policies including load balancing, geo-redundancy, connection pooling, etc., sitting on top of the DataStax driver using native APIs. All of this is abstracted behind the ever prevalent POJO.</description>
    </item>
    
    <item>
      <title>Introducing Project Casquatch</title>
      <link>http://thedigitallink.net/posts/casquatch-open-source/</link>
      <pubDate>Wed, 25 Jul 2018 16:04:24 -0700</pubDate>
      
      <guid>http://thedigitallink.net/posts/casquatch-open-source/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>